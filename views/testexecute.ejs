<%- include("partials/header") %>
<%- include("partials/instructionModal") %>
<div class="container-fluid d-none" id='test'>
  <div class="row justify-content-center p-1 p-md-3" style="height: 100vh">
    <div class="col-12 col-xl-10 shadow-sm border border-2 rounded-3 p-md-2">
      <div class="d-flex justify-content-center p-1">
        <div class="bg-light border border-1 rounded-3 p-md-2">
          <p class="h3 mt-1 font-monospace p-1 p-md-2"><%=i18n.Questions%> <span class="ms-5 blue" id="q-num"></span></p>
        </div>
      </div>
      <div class="row justify-content-center align-items-center mt-md-2">
        <div class="col-10 col-sm-9 col-md-10 col-lg-6">
          <img src="" id="img" class="img-fluid animate__animated" style="width:80vw;height: 49vh;">
        </div>
      </div>
      <div class="row pt-2 pt-md-4 justify-content-center text-center align-items-center">
        <%for (var i = 0;i< 4;i++){%>
          <div class="col-6 col-sm-2 pt-1 pt-md-0 py-md-1">
            <button type="button" class="btn btn-warning btn-lg" data-bs-toggle="modal" data-bs-target="#hintModal" id="hint_<%=i%>" data-bs-whatever="<%=i%>"
              <% if(i!==0){%>disabled<%}%>
              ><i class="fa fa-light fa-lightbulb"></i></button>
          </div>
        <%}%>
      </div>
      <div class="row justify-content-center py-1 py-md-4 text-center align-items-center">
        <div class="col-11 col-sm-10 col-md-5 col-lg-4 pt-2">
          <div class="form"> 
            <input type="text" class="form-control form-input" placeholder="<%=i18n.Enteryouranswerhere%>" id="answer"> 
            <span class="left-pan blue">
              <i class="fa fa-microphone" onclick="startDictation(this)" id="mic-button"></i>
            </span> 
          </div>
          <div class="pids-wrapper text-center d-none">
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
            <div class="pid"></div>
          </div>
        </div>
        <div class="col-4 col-sm-4 col-md-3 col-lg-2 pt-2">
          <button type='button' class="btn btn-dark btn-lg" onclick="repeatAudio('q')"><b><%=i18n.Audio%> </b><i class="fa-solid fa-repeat"></i></button>
        </div>
        <div class="col-4 col-sm-4 col-md-3 col-lg-2 pt-2">
          <button class="btn btn-success btn-lg" onclick="next_q()" id='next'><%=i18n.Next%> <i class="fa-solid fa-angles-right"></i></button>
        </div>
        <div class="col-4 col-sm-4 col-md-3 col-lg-2 pt-2">
          <button class="btn btn-primary btn-lg" onclick="pause_test()"><b><%=i18n.Pause%></b> <i class="fa fa-pause"></i></button>
        </div>
      </div>
    </div>

    <!-- <div class="mx-3 col-2 d-none d-xl-block shadow-sm border border-2 rounded-3">
      <div class="row text-center align-items-center h-25 my-3">
        <div class="col-12">
          <h6 class="my-2"><%=i18n.TestID%> : <%= testid %></h6>
          <h6 id='score' class="my-2"></h6>
        </div>
      </div>
      <div class="row text-center justify-content-center align-items-center my-5">
        <%var i=1%>
        <%questionIds.forEach((questionIds)=>{%>
          <div class="col-3 py-1">
            <button type="button" class="btn btn-primary btn-square-md" id="'<%=i%>'"><%=i%></button>
          </div>
          <%i=i+1;%>
        <%})%>
      </div>
      <div class="row h-25 mt-5">
        <div class="col-12">
          <canvas id="myChart"></canvas>
        </div>
      </div>
    </div> -->
    
  </div>
</div>
<div hidden id="spinner"></div>
<%- include("partials/hintModal") %>

<script>
  /* Animate Test Execution */
  document.getElementById("img").addEventListener('mouseenter', function() {
    this.classList.add('animate__pulse')
  });
  document.getElementById("img").addEventListener('mouseleave', function(){
    this.classList.remove('animate__pulse')
  });
  $( "#hintModal" ).on('show.bs.modal', function(){
    this.classList.remove('animate__rollOut');
    this.classList.add('animate__rollIn');
  });
  $( "#hintModal" ).on('hide.bs.modal', function(){
    this.classList.remove('animate__rollIn');
    this.classList.add('animate__rollOut');
  });
</script>

<script type="text/javascript">
  window.addEventListener('beforeunload', async function (e) {
    e.preventDefault();
    $(window).unbind();
    if(hints_taken!==0){
      await fetch('/test/update_hints/<%=testid%>', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          hints_taken: hints_taken,
        }),
        keepalive: true
      });
    }
    e.returnValue = '';
  });

  window.onload = function() {
    get_initial_test_details();
    checkBrowser();
  };

  function startTest() {
    if(document.getElementById("instruRead").checked && document.getElementById("micTested").checked) {
      document.getElementById("instructions").classList.add('d-none');
      swal('<%=i18n.Taketestnow%>','<%=i18n.Takeyourtestnow%>','success')
      .then(function(){
        disp_question();
        //get_initial_test_details()
      });
    }else{
      swal("<%=i18n.Warning%>", "<%=i18n.readinstructionstoproceed%>", "warning");
    }
  }

  const spinner = document.getElementById("spinner"); 
  const test = document.getElementById("test");

  //------------ To Keep Track of Test scores -----------------------//
  var q='<%=questionIds%>'.split(',')
  var curq=null;   //Stores curq question details
  var curq_no=0;
  var hints_taken=0;
  var hint_status={'1':0,'2':0,'3':0,'4':0}
  var ans={'0':0,'1':0,'2':0,'3':0,'4':0};
  var unans={'0':0,'1':0,'2':0,'3':0,'4':0};
  var score=0;
  var cur_hint;
  //------------ End -----------------------//

  //------------ Progress Chart -------------//
  // var data = {
  //         labels: [
  //             "<%=i18n.Attempted%>",
  //             "<%=i18n.Tobeattemted%>",
  //         ],
  //         datasets: [
  //             {
  //                 data: [curq_no, q.length-curq_no],
  //                 backgroundColor: [
  //                     "#10ba00",
  //                     "#9ca3af",
                      
  //                 ],
  //                 hoverBackgroundColor: [
  //                     "#0b8000",
  //                     "#9ba5b6",
  //                 ]
  //             }]
  //     };
  //     var myDoughnutChart;
  //------------------ End -----------------------//

  //------------ Text to speech -----------------------//
  var msg = new SpeechSynthesisUtterance();
  var voices = window.speechSynthesis.getVoices();
  

  function setAudioOutput(){
    voices = window.speechSynthesis.getVoices();
    msg.voice = voices[2]; 
    msg.volume = 1; // From 0 to 1
    msg.rate = 0.7; // From 0.1 to 10
    msg.pitch = 1; // From 0 to 2
    msg.lang = 'en-IN';
  }
  //------------ End -----------------------//

  function get_initial_test_details(){
    //spinner.removeAttribute('hidden');
    fetch('/test/<%=testid%>')
    .then(response => response.json())
    .then(test=>{
      ans=test.answered;
      unans=test.unanswered;
      score=parseInt(test.score);
      hints_taken=parseInt(test.paused_hint);
      curq_no=parseInt(test.pauesdqno);
      //disp_question();

      //create_chart();
    });
  }

  // function create_chart(){
  //     var ctx = document.getElementById("myChart");
  //     myDoughnutChart = new Chart(ctx, {
  //         type: 'doughnut',
  //         data: data,
  //         options: {
  //           rotation:  86* Math.PI,
  //           circumference: 57.25 * Math.PI
  //         }
  //     });
  //     disp_question();
  // }

  function check_ans(a){
    var val=document.getElementById('answer').value.toLowerCase().split(' ')
    a=a.map(element => {
      return element.toLowerCase();
    });
    document.getElementById('answer').value='';
    for(var i in val){
      if(a.indexOf(val[i]) >=0){
        score=score+(100-(hints_taken*10));
        ans[hints_taken.toString()]++;
        // document.getElementById('score').textContent='<%=i18n.ScoreObtained%> : '+score;
        hint_status={'1':0,'2':0,'3':0,'4':0}
        hints_taken=0;
        return;
      }
    }
    hint_status={'1':0,'2':0,'3':0,'4':0}
    hints_taken=0;
    unans[hints_taken.toString()]++;
  }

  function hint_button_update(){
    for(var i=0;i<hints_taken;i++){
      hint_status[''+(i+1)]=1;
      document.getElementById('hint_'+i).classList.remove('btn-warning');
      document.getElementById('hint_'+i).classList.add('btn-secondary');
      document.getElementById('hint_'+i).disabled=false;
      if(i!==3){
        document.getElementById('hint_'+(i+1)).disabled=false;
      }
    }
  }

  function hint_but_change(){
    for(var i=0;i<4;i++){
      document.getElementById('hint_'+i).classList.remove('btn-secondary');
      document.getElementById('hint_'+i).classList.add('btn-warning');
      if(i!=0){
        document.getElementById('hint_'+i).disabled = true;
      }
    }
  }
  
  function disp_question(){
    document.getElementById('q-num').textContent = (curq_no+1)+'/'+q.length;
    //document.getElementById('score').textContent='<%=i18n.ScoreObtained%> : '+score;
    test.classList.add('d-none')
    spinner.removeAttribute('hidden');
    if(curq_no<q.length && curq!=null){
        check_ans(curq.answer);
        //hint_status={'1':0,'2':0,'3':0,'4':0}
        update_test('paused');
    }else if(curq_no==q.length){
        check_ans(curq.answer);
        update_test('completed');
        spinner.setAttribute('hidden', '');
        swal({
          title: "<%=i18n.TestCompleted%>",
          text: "<%=i18n.testSubmitted%>",
          icon: "success",
          button: "<%=i18n.ok%>",
        })
        .then(function(){
          close_test();
        });
        setTimeout(setTimeout(close_test, 10000));
        return;
    }
    //progress_chart();
    hint_button_update();
    fetch('/question/<%=testid%>/'+q[curq_no])
    .then(response => response.json())
    .then(question => {
      spinner.setAttribute('hidden', '');
      test.classList.remove('d-none')
      curq=question
      document.getElementById('img').src = 'data:image/'+question.question.contentType+';base64,'+arrayBufferToBase64(question.question.data.data);
      setTimeout(function() {
        play_audio(curq.score);
      },1000);
      curq_no++;
      if(curq_no==q.length){
        document.getElementById('next').innerHTML=`<b><%=i18n.submit%> </b><i class="fa-solid fa-paper-plane"></i>`;
      }
    });
  }

  function hint_but(hint){
    hint=parseInt(hint);
    cur_hint=document.getElementById('hint_'+hint)
    if(hint!=3){
      next_hint=document.getElementById('hint_'+(hint+1))
      cur_hint.classList.remove('btn-warning');
      cur_hint.classList.add('btn-secondary');
      next_hint.disabled=false;
    }else{
      cur_hint.classList.remove('btn-warning');
      cur_hint.classList.add('btn-secondary');
    }
    if(hint_status[''+(hint+1)]!=1){
      hint_status[''+(hint+1)]=1;
      hints_taken++;
    }
  }

  var hintModal = document.getElementById('hintModal')
  hintModal.addEventListener('show.bs.modal', function (event) {
    var hint = event.relatedTarget
    var hint = hint.getAttribute('data-bs-whatever')
    document.getElementById('hint_img').src = 'data:image/'+curq.hints[hint].hint.contentType+';base64,'+arrayBufferToBase64(curq.hints[hint].hint.data.data);
    hint_but(hint)
    play_audio(curq.hints[hint].score);
    cur_hint=hint;
  })

  function arrayBufferToBase64(buffer) {
      var binary = '';
      var bytes = [].slice.call(new Uint8Array(buffer));
      bytes.forEach((b) => binary += String.fromCharCode(b));
      return window.btoa(binary);
  };

  function play_audio(txt){
    setAudioOutput();
    msg.text = txt;
    window.speechSynthesis.speak(msg);
  }

  function repeatAudio(q_or_h){
    if(q_or_h==='q'){
      play_audio(curq.score);
    }
    if(q_or_h==='h'){
      play_audio(curq.hints[cur_hint].score);
    }
  }

  function update_test(status){
    fetch('/test/<%=testid%>',{
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({
          status: status,
          score: score,
          ans : ans,
          unans : unans
        })
      })
      .then(response => response.json())
      .then(test => {
        console.log(test.message)
      });
  }

  function pause_test(){
    swal({
      title: "<%=i18n.Doyouwanttopausethetest%>",
      text: "<%=i18n.pausetest%>",
      icon: "info",
      buttons: ['<%=i18n.No%>','<%=i18n.Yes%>'],
    })
    .then(isPaused => {
      if (isPaused) {
        close_test();
      }
      else {
        return;
      }
    })
  }
  function close_test(){
    window.close();
  }

  function next_q(val){
    if(document.getElementById('answer').value===''){
      //play_audio('You have not answered this question. Do you want to skip this question?')
      swal({
        title: "<%=i18n.Youhavenotansweredthisquestion%>",
        text: "<%=i18n.skipmsg%>",
        icon: "warning",
        buttons: ['<%=i18n.No%>','<%=i18n.Yes%>'],
      }).
      then(yes => {
        if(!yes) {
          return;
        }else{
          hint_but_change();
          disp_question();
        }
      })
    }else{
      hint_but_change();
      disp_question();
    }
  }

  function startDictation(ev) {
      if (window.hasOwnProperty('webkitSpeechRecognition')) {

        var recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
  
        recognition.onstart = function(e){
          startAudioRecording('pid');
          document.getElementsByClassName('pids-wrapper')[0].classList.remove('d-none');
          document.getElementsByClassName('left-pan')[0].classList.remove('blue');
          document.getElementsByClassName('left-pan')[0].classList.add('green');
          ev.classList.add('fa-beat')
        }
        
        recognition.start();
        recognition.onresult = function (e) {
          document.getElementById('answer').value = e.results[0][0].transcript;
          recognition.stop();
          StopAudioRecording();
          document.getElementsByClassName('pids-wrapper')[0].classList.add('d-none');
          clearTimeout();
          document.getElementsByClassName('left-pan')[0].classList.add('blue');
          document.getElementsByClassName('left-pan')[0].classList.remove('green');
          ev.classList.remove('fa-beat');
        };

        recognition.onspeechend = function() {
          recognition.stop();
          document.getElementsByClassName('left-pan')[0].classList.add('blue');
          document.getElementsByClassName('left-pan')[0].classList.remove('green');
          ev.classList.remove('fa-beat');
        }

        recognition.onerror = function (e) {
          recognition.stop();
          StopAudioRecording();
          document.getElementsByClassName('pids-wrapper')[0].classList.add('d-none');
          clearTimeout();
        };
      }
    }

    // function progress_chart(){
    //   data.datasets[0].data=[curq_no,q.length-curq_no]
    //   myDoughnutChart.data.datasets[0].data=[curq_no,q.length-curq_no];
    //   myDoughnutChart.update();
    // }

    var audioRecorder = {
      mediaRecorder: null,
      streamBeingCaptured: null,
    start: function () {
        if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {
            return Promise.reject(new Error('mediaDevices API or getUserMedia method is not supported in this browser.'));
        }

        else {
            return navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream=> {
                    audioRecorder.streamBeingCaptured = stream;
                    audioRecorder.mediaRecorder = new MediaRecorder(stream); 
                    audioRecorder.mediaRecorder.start();
                });
        }
    },
    stop: function () {
        return new Promise(resolve => {
            audioRecorder.cancel();
        });
    },
    cancel: function () {
        audioRecorder.mediaRecorder.stop();
        audioRecorder.stopStream();
        audioRecorder.resetRecordingProperties();
    },
    stopStream: function () {
        audioRecorder.streamBeingCaptured.getTracks()
            .forEach(track => track.stop()); 
    },
    resetRecordingProperties: function () {
        audioRecorder.mediaRecorder = null;
        audioRecorder.streamBeingCaptured = null;
    }
}

    function startAudioRecording(pid) {
        audioRecorder.start()
            .then(() => { //on success 
              calculate_volume(pid);
            })    
            .catch(error => { //on error
              switch (error.name) {
                default:
                  swal({
                    title: "<%=i18n.Error%>",
                    text: "<%=i18n.Unabletoaccessyourmicrophone%>",
                    icon: "error",
                    buttons: ['<%=i18n.Quit%>','<%=i18n.Proceed%>'],
                  })
                  .then((proceed) => {
                    if (proceed) {
                      document.getElementById('mic-button').classList.add('d-none');
                    } else {
                      close_test();
                    }
                  });
              }
              recError();
        });
    }

    function StopAudioRecording() {
    //stop the recording using the audio recording API
    audioRecorder.stop()
        .then(() => { //stopping makes promise resolves to the blob file of the recorded audio
           
        })
        .catch(error => {
            swal("<%=i18n.Errors%>", "<%=i18n.unableaceessyourmicrophone%>", "error");
        });
    }

    function calculate_volume(pid) {
      let audioContext = new AudioContext();
      let analyser = audioContext.createAnalyser();
      let microphone = audioContext.createMediaStreamSource(audioRecorder.streamBeingCaptured);
      let scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);

      analyser.smoothingTimeConstant = 0.8;
      analyser.fftSize = 1024;

      microphone.connect(analyser);
      analyser.connect(scriptProcessor);
      scriptProcessor.connect(audioContext.destination);
      scriptProcessor.onaudioprocess = function() {
        let array = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(array);
        let arraySum = array.reduce((a, value) => a + value, 0);
        let average = arraySum / array.length;
        colorPids(average,pid);
      }
    }
  
  function colorPids(vol,pid) {
  const allPids = [...document.querySelectorAll('.'+pid)];
  const numberOfPidsToColor = Math.round(vol / 10);
  const pidsToColor = allPids.slice(0, numberOfPidsToColor);
  for (const pid of allPids) {
    pid.style.backgroundColor = "#e6e7e8";
  }
  for (const pid of pidsToColor) {
    pid.style.backgroundColor = "#69ce2b";
  }
}

  //------------ Instructions Page ------------------------//

  let curTab=0;
  showTab(curTab);
  get_list_of_mic();
  let recMic;

  function showTab(n) {
    var x = document.getElementsByClassName("tab");
    x[n].classList.remove('d-none')
    x[n].classList.add('d-block');
    if (n == 0) {
      document.getElementById("prevBtn").classList.add('d-none');
    } else {
      document.getElementById("prevBtn").classList.remove('d-none');
    }
  }
    
  function nextPrev(n) {
    var x = document.getElementsByClassName("tab");
    x[curTab].classList.add('d-none');
    x[curTab].classList.remove('d-block')
    curTab = curTab + n;
    if(curTab===(x.length-1)){
      document.getElementById("nextBtn").innerHTML=`<i class="fas fa-play"></i>`;
      document.getElementById("nextBtn").onclick=function() {startTest();}
    } else {
      document.getElementById("nextBtn").innerHTML=`<i class="fa-solid fa-angles-right"></i>`;
      document.getElementById("nextBtn").onclick=function() {nextPrev(1)}
    }
    showTab(curTab);
  }

  function start() {
    if (window.stream) {
      stream.getAudioTracks()[0].stop();
    }
  }

  function get_list_of_mic(){
    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
      swal("<%=i18n.Errors%>","<%=i18n.enumerateDevicesnotsupported%>", "error");
      return;
    }

    navigator.mediaDevices.enumerateDevices()
    .then(function(devices) {
      let list_of_mic=document.getElementById("list_of_mic")
      devices.forEach(function(device) {
        if(device.kind==='audioinput'){
          let option=document.createElement("option");
          option.value=device.deviceId;
          option.text= device.label || `microphone ${list_of_mic.length + 1}`;
          list_of_mic.appendChild(option);
        }
      });
    })
    .then(start)
    .catch(function(err) {
      console.log(err.name + ": " + err.message);
    });
  }

  function micTested(){
    swal('<%=i18n.Success%>','<%=i18n.Microphonetestedsuccessfully%>','success');
    document.getElementsByClassName('swal-footer')[0].classList.add('text-center');
    document.getElementsByClassName('swal-button')[0].classList.add('btn','btn-lg','btn-info');
    StopAudioRecording();
    document.getElementsByClassName('pids-wrapper1')[0].classList.add('d-none')
    document.getElementById('nextBtn').removeAttribute('disabled')
  }

  function startRec(){
    document.getElementsByClassName('pids-wrapper1')[0].classList.remove('d-none')
    document.getElementById('rec').setAttribute('disabled','')
    startAudioRecording('pid1');
    recMic=setTimeout(micTested,5000);
  }

  function recError(){
    clearTimeout(recMic);
    nextPrev(1);
    document.getElementById('nextBtn').removeAttribute('disabled')
    document.getElementById('rec').setAttribute('disabled','')
  }

  function checkBrowser(){
    if(typeof InstallTrigger !== 'undefined' || 
      (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0 ||
      /*@cc_on!@*/false || !!document.documentMode
    ){
      swal({
        title: "<%=i18n.UnsupportedBrowser%>..!",
        text: "<%=i18n.UnsupportedBrowserMSg%>",
        icon: "warning",
        buttons: ['<%=i18n.Quit%>','<%=i18n.Proceed%>'],
      })
      .then((proceed) => {
        if (proceed) {
          document.getElementById('instructions').classList.remove('d-none');
          document.getElementById('mic-button').classList.add('d-none');
          recError();
        } else {
          close_test();
        }
      });
    }else{
      document.getElementById('instructions').classList.remove('d-none');
    }
  }
</script>
<%- include("partials/footer") %>